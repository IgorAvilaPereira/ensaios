package apresentacao;

import configuracao.Configuracao;
import negocio.Aresta;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JToggleButton;
import persistencia.ConexaoPostgreSQL;
import prefuse.Display;
import prefuse.Visualization;
import prefuse.action.ActionList;
import prefuse.action.RepaintAction;
import prefuse.action.assignment.ColorAction;
import prefuse.action.layout.graph.ForceDirectedLayout;
import prefuse.activity.Activity;
import prefuse.controls.ControlAdapter;
import prefuse.controls.DragControl;
import prefuse.data.Edge;
import prefuse.data.Graph;
import prefuse.data.Node;
import prefuse.data.Schema;
import prefuse.data.io.DataIOException;
import prefuse.data.io.GraphMLReader;
import prefuse.render.DefaultRendererFactory;
import prefuse.render.LabelRenderer;
import prefuse.util.ColorLib;
import prefuse.util.PrefuseLib;
import prefuse.util.force.DragForce;
import prefuse.util.force.ForceSimulator;
import prefuse.util.force.NBodyForce;
import prefuse.util.force.SpringForce;
import prefuse.visual.*;
import prefuse.visual.expression.InGroupPredicate;

/**
 *
 * @author lucas
 */
public class TelaGrafo extends javax.swing.JFrame {

    private static final Schema DECORATOR_PUBLICATIONS_SCHEMA = PrefuseLib.getVisualItemSchema();
    public static final String NODE_PUBLICATIONS_DECORATORS = "nodePublicationsDeco";
    private static final Schema DECORATOR_PESOS_SCHEMA = PrefuseLib.getVisualItemSchema();
    public static final String EDGE_PESOS_DECORATORS = "edgePesosDeco";
    private VisualTable NodePublicationsDecoTable;
    private VisualTable EdgePesosDecoTable;
    public static final String EDGES = "graph.edges";
    public static final String NODES = "graph.nodes";
    public static final int vermelho = ColorLib.rgb(255, 0, 0);
    public static final int amarelo = ColorLib.rgb(255, 220, 12);
    public static final int azul = ColorLib.rgb(220, 220, 255);
    public static final int cinza = ColorLib.gray(100);
    public static final int preto = ColorLib.rgb(0, 0, 0);
    public static Locale location;
    private DecoratorItem dec;
    private EdgeItem ed;
    private boolean cliqueNodo = false;
    private String nome1, nome2;
    private static String grafo;
    private NodeItem item1, item2;
    private Display d;
    private Visualization vis;
    private Aresta ar;
    private LabelRenderer r;
    private boolean calcPageRank = false;
    private DefaultRendererFactory renderer;
    private LabelRenderer lr;
    private Graph graph;
    private ArrayList<Integer> diametro;
    private JToggleButton selected;
    private int anoIni = 0;
    private int anoFim = 0;
    private boolean EdgeDecoratorState = false;
    private boolean NodeDecoratorState = false;
    private ResourceBundle stringsInter;

    /**
     * Creates new form guiGrafo
     */
    public TelaGrafo(Locale location, String grafo) {
        initComponents();
        System.out.println("Location:"+location);
        this.location = location;
        System.out.println("Grafo:"+grafo);
        this.grafo = grafo;
        this.setVisible(true);
        this.grafo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLateral = new javax.swing.JPanel();
        BotaoArtigosEmComum = new javax.swing.JButton();
        BotaoArtigos = new javax.swing.JButton();
        BotaoPageRank = new javax.swing.JToggleButton();
        BotaoDiametro = new javax.swing.JToggleButton();
        BotaoPesos = new javax.swing.JToggleButton();
        BotaoNPublicacoes = new javax.swing.JToggleButton();
        BotaoLattes = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        BotaoGrau = new javax.swing.JToggleButton();
        BotaoClusterCoefficient = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JSeparator();
        LabelGiantComponent = new javax.swing.JLabel();
        LabelDensidade = new javax.swing.JLabel();
        BotaoCloseness = new javax.swing.JToggleButton();
        panelPrincipal = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setName(panelPrincipal.getName());

        BotaoArtigosEmComum.setText("Co-Authored Papers");
        BotaoArtigosEmComum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoArtigosEmComumActionPerformed(evt);
            }
        });

        BotaoArtigos.setText("Publications");
        BotaoArtigos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoArtigosActionPerformed(evt);
            }
        });

        BotaoPageRank.setText("PageRank");
        BotaoPageRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoPageRankActionPerformed(evt);
            }
        });

        BotaoDiametro.setText("Diameter");
        BotaoDiametro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoDiametroActionPerformed(evt);
            }
        });

        BotaoPesos.setText("Weight");
        BotaoPesos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoPesosActionPerformed(evt);
            }
        });

        BotaoNPublicacoes.setText("Number of Papers");
        BotaoNPublicacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoNPublicacoesActionPerformed(evt);
            }
        });

        BotaoLattes.setText("Curriculum");
        BotaoLattes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoLattesActionPerformed(evt);
            }
        });

        BotaoGrau.setText("Degree");
        BotaoGrau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoGrauActionPerformed(evt);
            }
        });

        BotaoClusterCoefficient.setText("Cluster Coefficient");
        BotaoClusterCoefficient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoClusterCoefficientActionPerformed(evt);
            }
        });

        BotaoCloseness.setText("Closeness");
        BotaoCloseness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoClosenessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLateralLayout = new javax.swing.GroupLayout(panelLateral);
        panelLateral.setLayout(panelLateralLayout);
        panelLateralLayout.setHorizontalGroup(
            panelLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLateralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelDensidade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LabelGiantComponent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotaoNPublicacoes, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(BotaoPesos, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(BotaoArtigos, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(BotaoArtigosEmComum, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(BotaoPageRank, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(BotaoDiametro, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(BotaoLattes, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(BotaoGrau, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BotaoClusterCoefficient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3)
                    .addComponent(BotaoCloseness, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelLateralLayout.setVerticalGroup(
            panelLateralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLateralLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(BotaoLattes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoArtigos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoArtigosEmComum, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoNPublicacoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoPesos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoGrau)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoPageRank)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoClusterCoefficient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoCloseness)
                .addGap(4, 4, 4)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoDiametro)
                .addGap(38, 38, 38)
                .addComponent(LabelGiantComponent, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelDensidade, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(946, Short.MAX_VALUE))
        );

        panelPrincipal.setPreferredSize(new java.awt.Dimension(800, 6));

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 815, Short.MAX_VALUE)
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 6, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelLateral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelLateral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotaoArtigosEmComumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoArtigosEmComumActionPerformed
        guiReplicas janelaReplicas = new guiReplicas();
        janelaReplicas.preenche(ar);
        janelaReplicas.setVisible(true);
        janelaReplicas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_BotaoArtigosEmComumActionPerformed

    private void BotaoArtigosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoArtigosActionPerformed
        ar.compilarListaPublicacoes(nome1);
        TelaPublicacoes janelaArtigos = new TelaPublicacoes();
        janelaArtigos.preenche(ar);
        janelaArtigos.setVisible(true);
        janelaArtigos.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_BotaoArtigosActionPerformed

    private void BotaoLattesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoLattesActionPerformed
        String link = item1.getSourceTuple().getString("link");

        Runtime rt = Runtime.getRuntime();
        try {
            rt.exec("sensible-browser " + link);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_BotaoLattesActionPerformed

    private void BotaoNPublicacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoNPublicacoesActionPerformed
        if (BotaoNPublicacoes.isSelected()) {
            desligarBotoes(BotaoNPublicacoes);
            lr.setTextField("pubs");
            desligarEdgeDecorator();
            ligarNodeDecorator();
        } else {
            desligarNodeDecorator();
        }
    }//GEN-LAST:event_BotaoNPublicacoesActionPerformed

    private void BotaoPesosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoPesosActionPerformed
        if (BotaoPesos.isSelected()) {
            desligarBotoes(BotaoPesos);
            desligarNodeDecorator();
            ligarEdgeDecorator();
        } else {
            desligarEdgeDecorator();
        }
    }//GEN-LAST:event_BotaoPesosActionPerformed

    private void BotaoGrauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoGrauActionPerformed
        if (BotaoGrau.isSelected()) {
            desligarBotoes(BotaoGrau);
            lr.setTextField("degree");
            desligarEdgeDecorator();
            ligarNodeDecorator();
        } else {
            desligarNodeDecorator();
        }
    }//GEN-LAST:event_BotaoGrauActionPerformed

    private void BotaoPageRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoPageRankActionPerformed
        if (BotaoPageRank.isSelected()) {
            desligarBotoes(BotaoPageRank);
            lr.setTextField("pagerank");
            desligarEdgeDecorator();
            ligarNodeDecorator();
        } else {
            desligarNodeDecorator();
        }
    }//GEN-LAST:event_BotaoPageRankActionPerformed

    private void BotaoClusterCoefficientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoClusterCoefficientActionPerformed
        if (BotaoClusterCoefficient.isSelected()) {
            desligarBotoes(BotaoClusterCoefficient);
            lr.setTextField("cluster_coefficient");
            desligarEdgeDecorator();
            ligarNodeDecorator();
        } else {
            desligarNodeDecorator();
        }
    }//GEN-LAST:event_BotaoClusterCoefficientActionPerformed

    private void BotaoDiametroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoDiametroActionPerformed
        if (BotaoDiametro.isSelected()) {
            ligarDiametro();
        } else {
            desligarDiametro();
        }


    }//GEN-LAST:event_BotaoDiametroActionPerformed

    private void BotaoClosenessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoClosenessActionPerformed
        if (BotaoCloseness.isSelected()) {
            desligarBotoes(BotaoCloseness);
            lr.setTextField("closeness");
            desligarEdgeDecorator();
            ligarNodeDecorator();
        } else {
            desligarNodeDecorator();
        }
    }//GEN-LAST:event_BotaoClosenessActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        
        
        try {
            if (args.length > 0) {
                System.out.println("Args:" + args[0]);
                grafo = args[0];
                System.out.println("Grafo:"+grafo);
                if (!grafo.endsWith(".xml")) {
                    grafo += ".xml";
                }
            } else {
                System.out.println("Sem parâmetros String args:...");
                grafo = "Gerenciamento de Informações.xml";
            }

        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            //grafo = "graph_new.xml";
            //grafo = "matrizDeAdjacencia_novaversao.xml";
            //grafo = "graphnovo.xml";
            //grafo = "grafo_metricas.xml";
            //grafo = "matrizDeAdjacencia.xml";

            //grafo = "rede_id1_v5.xml";
            //grafo = "C3 Geral 2008 - 2012.xml";
            //grafo = "C3 Geral 2008.xml";
            //grafo = "data/C3 Geral 2008 - 2009.xml";
            //grafo = "C3 Geral 2008 - 2010.xml";
            //grafo = "C3 Geral 2008 - 2011.xml";
            //grafo = "Nautec.xml";
            //grafo = "Sistemas Digitais e Embarcados.xml";
            //grafo = "COMPFLEX.xml";
            //grafo = "Sistemas Multiagentes.xml";
            //grafo = "Biologia Computacional.xml";
            //grafo = "Simulação Social e Ambiental.xml";
            //grafo = "Informática na Educação.xml";
            //grafo = "Núcleo de Física Ambiental.xml";
            grafo = "Gerenciamento de Informações.xml";

        }

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                //new guiGrafo().setVisible(true);
                TelaGrafo gui = new TelaGrafo(new Locale("pt", "BR"), grafo);
            }
        });
    }

    public void grafo() {

        stringsInter = ResourceBundle.getBundle("resources/msgs", location);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        //System.out.println(screenSize.width);
        //System.out.println(screenSize.height);
        diametro = new ArrayList<Integer>();

        //ImportaPublicacoes.importaXML("data/Pubs "+grafo);
        int larguraFrame = (int) (screenSize.width);
        int alturaFrame = (int) (screenSize.height * 0.9);

        setSize(larguraFrame, alturaFrame);

        int largLat = BotaoArtigos.getWidth() + 25;

        Dimension dimLat = new Dimension(largLat, alturaFrame);

        panelLateral.setPreferredSize(dimLat);

        Dimension dimPrin = new Dimension(larguraFrame - largLat, alturaFrame);

        panelPrincipal.setLocation(largLat, 0);
        panelPrincipal.setPreferredSize(dimPrin);
        try {
        ConexaoPostgreSQL conexao = new ConexaoPostgreSQL();
        ResultSet resultado = conexao.executeQuery("SELECT nome FROM rede WHERE xml = '"+grafo+"' or xml = '"+grafo+".xml';"  );       
        resultado.next();
        setTitle(stringsInter.getString("tituloPrincipal") + resultado.getString("nome"));
        } catch (SQLException e){
            System.out.println("Nao foi possivel encontrar o nome da rede...");
        }
        
        //setTitle(stringsInter.getString("tituloPrincipal")+"Nautec");
        BotaoLattes.setText(stringsInter.getString("curriculo"));
        BotaoArtigos.setText(stringsInter.getString("artigos"));
        BotaoArtigosEmComum.setText(stringsInter.getString("artigosEmComum"));
        BotaoNPublicacoes.setText(stringsInter.getString("nPublicacoes"));
        BotaoPesos.setText(stringsInter.getString("pesos"));
        BotaoGrau.setText(stringsInter.getString("grau"));
        BotaoPageRank.setText(stringsInter.getString("pageRank"));
        BotaoClusterCoefficient.setText(stringsInter.getString("clusterCoefficient"));
        BotaoDiametro.setText(stringsInter.getString("diametro"));

        graph = null;
        try {
            System.out.println("Começando a leitura do grafo..."+grafo);
            graph = new GraphMLReader().readGraph(grafo);
        } catch (DataIOException e) {
            System.out.println("Erro em carregar o grafo...saindo...");
            ///System.err.println("Error loading graph. Exiting...");
            System.exit(1);
        }
        try {
            FileReader fr = new FileReader(grafo);
            BufferedReader br = new BufferedReader(fr);
            for (int i = 0; i < 3; i++) {
                br.readLine();
            }
            String linha = br.readLine();
            String tmp = "";
            Pattern p = Pattern.compile("<\\!--[ ]*name:([^#]*)[ ]*--\\>");
            Matcher m = p.matcher(linha);
            /*tmp = m.group(1);
            setTitle(stringsInter.getString("tituloPrincipal")+tmp);*/

            linha = br.readLine();
            p = Pattern.compile("\\<\\!--[ ]*years:([0-9]{4})?/([0-9]{4})?[ ]*--\\>");
            m = p.matcher(linha);
            if (m.find()) {
                tmp = m.group(1);
                if (tmp != null) {
                    this.anoIni = Integer.parseInt(tmp);
                }
                tmp = m.group(2);
                if (tmp != null) {
                    this.anoFim = Integer.parseInt(tmp);
                }
            }

            linha = br.readLine();
            p = Pattern.compile("\\<\\!--[ ]*diameter:([0-9/]+)[ ]*--\\>");
            m = p.matcher(linha);
            if (m.find()) {
                tmp = m.group(1);
                String[] split = tmp.split("/");
                for (int i = 0; i < split.length; i++) {
                    diametro.add(Integer.parseInt(split[i]));
                }
            }

            DecimalFormat df = new DecimalFormat("0.00");
            linha = br.readLine();
            p = Pattern.compile("\\<\\!--[ ]*giant:([0-9]+.[0-9]*)+[ ]*--\\>");
            m = p.matcher(linha);
            if (m.find()) {
                LabelGiantComponent.setText(stringsInter.getString("giantComponent") + df.format(Float.parseFloat(m.group(1)) * 100) + " %");
            }

            linha = br.readLine();
            p = Pattern.compile("\\<\\!--[ ]*density:([0-9]+.[0-9]*)+[ ]*--\\>");
            m = p.matcher(linha);
            if (m.find()) {
                LabelDensidade.setText(stringsInter.getString("densidade") + df.format(Float.parseFloat(m.group(1)) * 100) + " %");
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(TelaGrafo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TelaGrafo.class.getName()).log(Level.SEVERE, null, ex);
        }

        BotaoArtigosEmComum.setEnabled(false);
        BotaoArtigos.setEnabled(false);
        BotaoLattes.setEnabled(false);

        ar = new Aresta(anoIni, anoFim);

        // -- 2. the visualization --------------------------------------------
        vis = new Visualization();
        vis.add("graph", graph);
        vis.setInteractive(EDGES, null, false);

        // -- 3. the renderers and renderer factory ---------------------------
        // draw the "name" label for NodeItems
        r = new LabelRenderer("name");
        r.setRoundedCorner(8, 8); // round the corners

        //EdgeRenderer ed = new EdgeRenderer(Constants.EDGE_TYPE_LINE);
        //DefaultRendererFactory renderer = new DefaultRendererFactory(r);
        renderer = new DefaultRendererFactory(r);

        lr = new LabelRenderer("degree");

        renderer.add(new InGroupPredicate(NODE_PUBLICATIONS_DECORATORS), lr);
        renderer.add(new InGroupPredicate(EDGE_PESOS_DECORATORS), new LabelRenderer("amount"));
        //renderer.add(new InGroupPredicate(NODE_DEGREE_DECORATORS), new LabelRenderer("degree"));

        vis.setRendererFactory(renderer);

        DECORATOR_PESOS_SCHEMA.setDefault(VisualItem.TEXTCOLOR, ColorLib.alpha(0));
        DECORATOR_PESOS_SCHEMA.setDefault(VisualItem.INTERACTIVE, false);
        EdgePesosDecoTable = vis.addDecorators(EDGE_PESOS_DECORATORS, EDGES, DECORATOR_PESOS_SCHEMA);

        DECORATOR_PUBLICATIONS_SCHEMA.setDefault(VisualItem.TEXTCOLOR, ColorLib.alpha(0));
        DECORATOR_PUBLICATIONS_SCHEMA.setDefault(VisualItem.INTERACTIVE, false);
        NodePublicationsDecoTable = vis.addDecorators(NODE_PUBLICATIONS_DECORATORS, NODES, DECORATOR_PUBLICATIONS_SCHEMA);

        ColorAction nEdges = new ColorAction(EDGES, VisualItem.STROKECOLOR);
        nEdges.setDefaultColor(ColorLib.gray(100));

        // -- 4. the processing actions ---------------------------------------
        ColorAction fill = new ColorAction(NODES, VisualItem.FILLCOLOR, azul);
        //fill.add(VisualItem.FIXED, ColorLib.rgb(255, 100, 100));
        //fill.add(VisualItem.HIGHLIGHT, ColorLib.rgb(255, 220, 12));

        // use black for node text
        ColorAction text = new ColorAction(NODES, VisualItem.TEXTCOLOR, ColorLib.gray(0));
        // use light grey for edges
        ColorAction edges = new ColorAction(EDGES, VisualItem.STROKECOLOR, ColorLib.gray(100));

        ActionList color = new ActionList();
        color.add(text);
        color.add(fill);
        color.add(edges);

        ForceSimulator fsim = new ForceSimulator();

        //SpringForce - simula a forca de uma mola entre os nodos
        //Serve para não deixar os nodos se distanciarem demais
        //O primeiro parametro e a constante da mola
        //O segundo parametro e' a distancia padrao entre os nodos
        fsim.addForce(new SpringForce(0.000099f, 220.0f));

        //NBodyForce - simula uma forca gravitacional ou cargas eletricas
        //Ajuda a manter o grafo mais organizado, pois evita que os nodos fiquem muito perto um dos outros
        //O primeiro parametro e a forca gravitacional, se positiva os nodos se atraem
        //se negativa se repelem.
        //O segundo parametro e a distancia em que dois nodos interagem com essa forca. -1 e infinito
        //O terceiro parametro e barnes-hut theta. Ainda nao analisado
        fsim.addForce(new NBodyForce(-6.8f, -1.0f, 0));

        //DragForce - simula uma forca de arrasto, como se os nodos estivessem em um fluido viscoso
        //Ajuda a estabilizar os nodos.
        fsim.addForce(new DragForce(0.016f));

        //fsim.addForce(new WallForce(0, 0, 800, 600));
        ForceDirectedLayout force = new ForceDirectedLayout("graph", fsim, true);

        ActionList forces = new ActionList(Activity.INFINITY);
        forces.add(force);
        forces.add(new RepaintAction());

        ActionList layout = new ActionList(Activity.INFINITY);
        layout.add(new EdgeLabelLayout(EDGE_PESOS_DECORATORS));
        //layout.add(new NodeLabelLayout(NODE_DEGREE_DECORATORS));
        layout.add(new NodeLabelLayout(NODE_PUBLICATIONS_DECORATORS));

        //layout.add(new DataSizeAction(EDGES, "amount"));
        layout.add(new RepaintAction());

        // add the actions to the visualization
        vis.putAction("color", color);
        vis.putAction("layout", layout);
        vis.putAction("forces", forces);

        // -- 5. the display and interactive controls -------------------------
        d = new Display(vis);
        //d.setSize(800, 600); // set display size
        d.setSize(dimPrin);

        d.addControlListener(new DragControl());
        //d.addControlListener(new PanControl());
        //d.addControlListener(new FocusControl(1));
        //d.addControlListener(new ZoomControl());
        //d.addControlListener(new WheelZoomControl());
        //d.adcliqueNododControlListener(new ZoomToFitControl(NODES));
        //d.addControlListener(new NeighborHighlightControl());
        d.addControlListener(new Listener());

        panelPrincipal.add(d);
        panelPrincipal.setVisible(true);

        // -- 6. launch the visualization -------------------------------------
        vis.run("color"); 	// assign the colors
        vis.run("layout");	// start up the animated layout
        vis.run("forces");

    }

    public Aresta getAresta() {
        return ar;
    }

    private void ligarEdgeDecorator() {
        desligarEdgeDecorator();
        for (int i = 0; i < EdgePesosDecoTable.getRowCount(); i++) {
            EdgePesosDecoTable.setTextColor(i, vis.getVisualItem(EDGES, graph.getEdge(i)).getStrokeColor());
            EdgePesosDecoTable.setInteractive(i, true);
        }
        EdgeDecoratorState = true;
    }

    private void desligarEdgeDecorator() {
        for (int i = 0; i < EdgePesosDecoTable.getRowCount(); i++) {
            EdgePesosDecoTable.setTextColor(i, ColorLib.alpha(0));
            EdgePesosDecoTable.setInteractive(i, false);
            if (vis.getVisualItem(EDGES, graph.getEdge(i)).getStrokeColor() == vermelho) {
                vis.getVisualItem(EDGES, graph.getEdge(i)).setStrokeColor(cinza);
            }
        }
        EdgeDecoratorState = false;
    }

    private void ligarNodeDecorator() {
        desligarNodeDecorator();
        for (int i = 0; i < NodePublicationsDecoTable.getRowCount(); i++) {
            NodePublicationsDecoTable.setTextColor(i, ColorLib.gray(0));
            NodePublicationsDecoTable.setFillColor(i, vis.getVisualItem(NODES, graph.getNode(i)).getFillColor());
            r.setRoundedCorner(0, 0);
        }
        NodeDecoratorState = true;
    }

    private void desligarNodeDecorator() {
        for (int i = 0; i < NodePublicationsDecoTable.getRowCount(); i++) {
            NodePublicationsDecoTable.setTextColor(i, ColorLib.alpha(0));
            NodePublicationsDecoTable.setFillColor(i, ColorLib.alpha(0));
            r.setRoundedCorner(8, 8);
        }
        NodeDecoratorState = false;
    }

    private void desligarBotoes(JToggleButton b) {
        BotaoNPublicacoes.setSelected(false);
        BotaoPesos.setSelected(false);
        BotaoGrau.setSelected(false);
        BotaoPageRank.setSelected(false);
        BotaoClusterCoefficient.setSelected(false);
        BotaoCloseness.setSelected(false);
        b.setSelected(true);
    }

    private void ligarDiametro() {
        for (int i = 0; i < diametro.size() - 1; i++) {
            Node origem = graph.getNode(diametro.get(i));
            Node destino = graph.getNode(diametro.get(i + 1));
            Edge edge = graph.getEdge(origem, destino);
            if (edge == null) {
                edge = graph.getEdge(destino, origem);
            }
            VisualItem a = vis.getVisualItem(EDGES, edge);
            a.setStrokeColor(vermelho);
            a.setSize(2);

        }
    }

    private void desligarDiametro() {
        for (int i = 0; i < diametro.size() - 1; i++) {
            Node origem = graph.getNode(diametro.get(i));
            Node destino = graph.getNode(diametro.get(i + 1));
            Edge edge = graph.getEdge(origem, destino);
            if (edge == null) {
                edge = graph.getEdge(destino, origem);
            }
            VisualItem a = vis.getVisualItem(EDGES, edge);
            a.setStrokeColor(ColorLib.gray(100));
            a.setSize(1);
        }
    }

    private class Listener extends ControlAdapter {

        public void mouseClicked(java.awt.event.MouseEvent e) {
            if (e.getButton() == MouseEvent.BUTTON3) {
                if (vis.getAction("forces").isEnabled()) {
                    vis.getAction("forces").setEnabled(false);
                } else {
                    vis.getAction("forces").setEnabled(true);
                }
            }
        }

        @Override
        public void itemClicked(VisualItem item, MouseEvent e) {

            try {
                ed.setStrokeColor(cinza);
                if (EdgeDecoratorState) {
                    EdgePesosDecoTable.setTextColor(ed.getRow(), cinza);
                }
            } catch (java.lang.Throwable t) {
            }
            try {
                dec.setTextColor(cinza);
                dec.getDecoratedItem().setStrokeColor(cinza);
            } catch (java.lang.Throwable t) {
            }
            if (item.isInGroup(NODES)) {
                if (!cliqueNodo) {
                    try {
                        item1.setFillColor(azul);
                        item2.setFillColor(azul);
                    } catch (java.lang.Throwable t) {
                    }

                    item1 = (NodeItem) item;
                    nome1 = item1.getSourceTuple().getString(0);
                    item1.setFillColor(vermelho);

                    if (BotaoNPublicacoes.isSelected()) {
                        NodePublicationsDecoTable.setFillColor(item1.getRow(), vermelho);
                    }

                    cliqueNodo = true;

                    BotaoArtigosEmComum.setEnabled(false);
                    BotaoArtigos.setEnabled(true);
                    BotaoLattes.setEnabled(true);

                    Iterator iter = item1.neighbors();
                    while (iter.hasNext()) {
                        NodeItem n = (NodeItem) iter.next();
                        n.setFillColor(amarelo);
                        if (BotaoNPublicacoes.isSelected()) {
                            NodePublicationsDecoTable.setFillColor(n.getRow(), amarelo);
                        }
                    }

                } else {
                    BotaoArtigos.setEnabled(false);
                    item2 = (NodeItem) item;
                    nome2 = item2.getSourceTuple().getString(0);
                    BotaoLattes.setEnabled(false);

                    Iterator iter = item1.neighbors();
                    while (iter.hasNext()) {
                        NodeItem n = (NodeItem) iter.next();
                        n.setFillColor(azul);
                        if (BotaoNPublicacoes.isSelected()) {
                            NodePublicationsDecoTable.setFillColor(n.getRow(), azul);
                        }
                    }

                    if (nome1.equals(nome2)) {
                        nome1 = "";
                        nome2 = "";
                        item1.setFillColor(azul);
                        if (BotaoNPublicacoes.isSelected()) {
                            NodePublicationsDecoTable.setFillColor(item1.getRow(), azul);
                        }

                    } else {
                        item2.setFillColor(vermelho);
                        if (BotaoNPublicacoes.isSelected()) {
                            NodePublicationsDecoTable.setFillColor(item2.getRow(), vermelho);
                        }
                        BotaoArtigosEmComum.setEnabled(false);
                        iter = item2.neighbors();
                        while (iter.hasNext()) {
                            if (iter.next() == item1) {
                                BotaoArtigosEmComum.setEnabled(true);
                                ar.adjacentes(nome1, nome2);
                                Iterator iter2 = item2.edges();
                                EdgeItem edTmp;
                                while (iter2.hasNext()) {
                                    edTmp = (EdgeItem) iter2.next();
                                    if (edTmp.getAdjacentItem(item2) == item1) {
                                        ed = edTmp;
                                        ed.setStrokeColor(vermelho);
                                        if (BotaoPesos.isSelected()) {
                                            EdgePesosDecoTable.setTextColor(ed.getRow(), vermelho);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    cliqueNodo = false;
                }
            } else if (item.isInGroup(EDGE_PESOS_DECORATORS)) {
                try {
                    dec.getDecoratedItem().setStrokeColor(cinza);
                    dec.setTextColor(cinza);
                    if (dec != (DecoratorItem) item) {
                        dec = (DecoratorItem) item;
                        dec.getDecoratedItem().setStrokeColor(vermelho);
                        dec.setTextColor(vermelho);
                    } else {
                        dec = null;
                    }
                } catch (java.lang.Throwable t) {
                    dec = (DecoratorItem) item;
                    dec.getDecoratedItem().setStrokeColor(vermelho);
                    dec.setTextColor(vermelho);
                }

            }

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotaoArtigos;
    private javax.swing.JButton BotaoArtigosEmComum;
    private javax.swing.JToggleButton BotaoCloseness;
    private javax.swing.JToggleButton BotaoClusterCoefficient;
    private javax.swing.JToggleButton BotaoDiametro;
    private javax.swing.JToggleButton BotaoGrau;
    private javax.swing.JButton BotaoLattes;
    private javax.swing.JToggleButton BotaoNPublicacoes;
    private javax.swing.JToggleButton BotaoPageRank;
    private javax.swing.JToggleButton BotaoPesos;
    private javax.swing.JLabel LabelDensidade;
    private javax.swing.JLabel LabelGiantComponent;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel panelLateral;
    private javax.swing.JPanel panelPrincipal;
    // End of variables declaration//GEN-END:variables
}
